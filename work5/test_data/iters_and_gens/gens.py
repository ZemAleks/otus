
"""
- Генератор — это объект, который сразу при создании не вычисляет значения всех своих элементов.
- Хранит в памяти только последний вычисленный элемент, правило перехода к следующему и условие, при котором выполняется прерывание.
- Вычисление следующего значения происходит, лишь при выполнении метода next(), предыдущее значение при этом теряется.
"""


def squares(maxi):  # Функция определяет максимальный показатель квадрата числа.
    for index in range(maxi):   # Функция `range` это генератор, который сразу возвращает объект, а не сохраняет его, что увеличивает объем памяти.
        yield index ** 2    # Возвращает из функции квадрат числа с сохранением состояния ее локальных переменных при повторном вызове.


for i in squares(4):  # Параметр ограничения цикла до четырех итераций.
    print(i)

"""
- Когда вы создаёте список, вы можете считывать его элементы один за другим — это называется итерацией.
- squares - является итерируемым объектом. 
- Когда вы создаёте список, используя генераторное выражение, вы создаёте также итератор.
- Yield - это оператор, ключевое слово, которое используется примерно как return — отличие в том, что функция вернёт генератор.
- Функция будет исполняться от начала до того момента, пока не наткнётся на yield — тогда она вернёт первое значение из цикла. 
- На каждый следующий вызов будет происходить ещё одна итерация написанного вами цикла.
- Возвращаться будет следующее значение — и так пока значения не кончатся.
"""

print("******")

generator = squares(5)
print(next(generator))
print(next(generator))
print("******")

# списочные выражения
my_tuple = (x ** 2 for x in range(5))
print(tuple(my_tuple))

my_list = [x ** 3 for x in range(5)]
print(my_list)

my_dict = {x: x ** 2 for x in range(5)}
print(my_dict)

print("******")

my_dict_2 = {x: x ** 2 for x in range(5) if x % 2 == 0}
print(my_dict_2)
