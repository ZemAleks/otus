"""
- Генератор — это объект, который сразу при создании не вычисляет значения всех своих элементов.
- Хранит в памяти только последний вычисленный элемент, правило перехода к следующему и условие, при котором выполняется прерывание.
- Вычисление следующего значения происходит, лишь при выполнении метода next(), предыдущее значение при этом теряется.
---
- Чем отличается генератор от итератора в Python?
- Основное отличие генераторов от итераторов заключается в том, как они создаются.
- Итераторы требуют больше кода и больше понимания протокола итератора.
- Генераторы же позволяют создать итератор более простым и удобным способом.
- В основном на проектах используются генераторы из-за простоты использования.
-
- Генератор это наследник итератора, который имеют более короткую форму.
- Используются для функций которые надо быстро реализовать, чтобы выдавать данные поэтапно с каждой итерацией.
- Для более сложных функций, для работы с тяжёлыми данными (таблицы или html страницы),
- то необходимо использовать классы объектов с итераторами, чтобы работать только с выборочной информацией необходимого класса объекта.
"""


def squares(maxi):  # Функция определяет максимальный показатель квадрата числа.
    # Функция `range` это генератор, который сразу возвращает объект через цикл for, а не сохраняет его, что увеличивает объем памяти.
    for index in range(maxi):
        # Ключевое слово yield, которое передает управление и возвращает итератор, используется для создания функций-генераторов.
        yield index ** 2  # Возвращает из функции квадрат числа с сохранением состояния ее локальных переменных при повторном вызове.


print("\n****** Функция генератора цикла for для расчета квадрата чисел ******")

for i in squares(5):  # Параметр ограничения цикла до пяти итераций.
    print(i)

"""
- Когда создаёте список, вы можете считывать его элементы один за другим — это называется итерацией.
- squares - является итерируемым объектом. 
- Когда создаёте список, используя генераторное выражение, вы создаёте также итератор.
- Yield - это оператор, ключевое слово, которое используется примерно как return — отличие в том, что функция вернёт генератор.
- Функция будет исполняться от начала до того момента, пока не наткнётся на yield — тогда она вернёт первое значение из цикла. 
- На каждый следующий вызов будет происходить ещё одна итерация написанного вами цикла.
- Возвращаться будет следующее значение — и так пока значения не кончатся.
"""

print("\n****** Ссылка на генератор расчета квадрата чисел ******")

generator = squares(5)  # ссылка на генератор квадрата числа с ограничением до пяти итераций.
# вывод результатов расчета значений для каждого цикла итераций.
print(next(generator))
print(next(generator))
print(next(generator))
print(next(generator))
print(next(generator))

print("\n****** Примеры итераторов коротких форм: кортежа, списка, словаря ******")

"""
- Примеры итераторов коротких форм, списочные выражения синтаксического сахара.
---
- В Python есть два вида циклов: for и while.
- Цикл for - позволяет проводить итерации — реализовывать набор инструкций нужное количество раз. 
- Его используют, когда количество итераций известно заранее, поэтому второе название цикла — c предусловием.
- Цикл for, также называемый циклом с параметром, указывается переменная и множество значений.
- Используется для перебора последовательностей (списков, кортежей, строк) и других итерируемых объектов.
---
- Цикл while — выполнять инструкции до тех пор, пока проверка во главе цикла будет истинной. 
- Его используют, когда заранее не знают количества итераций, поэтому еще его называют циклом с проверкой условия.
"""

my_tuple = (x ** 2 for x in range(5))  # итератор кортежа значений из цикла for с количеством итераций
print(tuple(my_tuple))

my_list = [x ** 2 for x in range(5)]  # итератор списка значений из цикла for с указанием кол-ва итераций
print(my_list)

# Итератор словаря с ключом и значением из цикла for с указанием кол-ва итераций.
my_dict = {x: x ** 2 for x in range(5)}
print(my_dict)

print("\n****** Итератор словаря с условием цикла for ******")

# Итератор словаря с условием для целых чисел из цикла for с указанием кол-ва итераций.
my_dict_2 = {x: x ** 2 for x in range(5) if x % 2 == 0}
print(my_dict_2)

print("\n****** Итератор списка c вложенным циклом while ******")

# Итератор списка значений из цикла for с указанием кол-ва итераций.
my_list2 = [x ** 2 for x in range(5)]
while True:  # Бесконечный цикл while, запущен пока выполняется условие.
    break    # Итератор остановится, как только цикл достигнет максимального значения итераций.
print(my_list2)
