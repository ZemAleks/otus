from work5.test_data.read_write_files.files import TXT_FILE


some_file = open(TXT_FILE, "r+")     # Вызов функции открытия файла (передаем путь к файлу, атрибуты).

"""
- Для того чтобы открыть файл, необходимо дописать путь к файлу.
- Вызвать функцию open, для открытия файла, далее в скобках указать, путь к файлу и атрибуты.
- TXT_FILE - абсолютное или относительное значение пути к файлу или файловый дескриптор открываемого файла.
- mode='r' - Атрибут, режим в котором мы будем открывать файл.
- mode - необязательно, строка указывает режим, в котором открывается файл, по умолчанию атрибут 'r'.
-
- "r" - read - читать, открывает файл только для чтения.
- "r+" - если, нужно что-то дописать в файл, то надо поставить знак плюс в атрибуте.
- "w" - write - записать, открыт для записи, если надо записать в файл  (перед записью файл будет очищен).
- "w+" - открывает файл для записи и чтения, перезаписывает существующий файл, если файл существует.
- "x" - exclusive creation - эксклюзивное создание, открытие на запись, если файла не существует, иначе исключение.
- "a" - open to add - дополнительное открытие на до-запись, открыт для добавления в конец файла.
- "a+" - открывает файл для добавления и чтения, указатель файла находится в конце файла, если файл существует.
- "b" - binary - бинарный, открытие в двоичном режиме.
- "t" - text - открытие в текстовом режиме (является значением по умолчанию).
- "+" - знак суммы, символ обновления (чтение + запись).
-
- Эти режимы могут быть скомбинированы. 
- Например, Режим по умолчанию 'r', открывает файл только для чтения текста, синоним 'rt', 'rb' открывает двоичный файл для чтения. 
- Режимы 'r+' и 'r+b' открывают файл и устанавливают курсор на начало файла, 
- запись в файл начинается с места остановки курсора при его чтении перед записью. 
- Комбинируя «r+» или «w+» можно добиться открытия файла в режиме чтения и записи одновременно с одним отличием 
- первый режим вызовет исключение, если файла не существует, а работа во втором режиме в таком случае создаст его.
"""

# print(some_file.read())       # Функция считывает весь файл сразу.
# print(some_file.read(10))     # Передаем параметры для считывания файла, число означает кол-во символов, посимвольное чтение.

# print(some_file.readline())   # Функция считывает одну строку, построчное считывание.

# print(some_file.readlines())    # Функция считывает все строки, выдает результат в виде списка вместе со служебными символами.
# print("=====")

# some_file.seek(0)     # функция возврата коретки, перемещает указатель курсора на нужную позицию в файле.
# print(some_file.read(10))

# Чтобы открыть файл, как доступный для записи, необходимо использовать атрибут "r+".
# some_file.write("test")      # заменяет значения в файле, если добавить атрибут "r+" в функцию some_file = open(TXT_FILE, "r+").

"""
- Открытые файлы с помощью функции open(), должны быть закрыты с помощью метода close(), 
- чтобы освободить ресурсы операционной системы.
- Важно. Все открытые файлы нужно обязательно закрывать, 
- т.к. из-за незакрытых файлов может произойти превышение лимита открытых дескрипторов в системе, что может повлечь сбой системы.
- При закрытии файла так же освобождаются все ресурсы памяти системы, которые были выделены для операции с файлом.
"""

some_file.close()      # обязательная функция закрытия файла в конце, для очистки памяти ОС.